CPD Installer:
wget https://github.com/IBM/cloud-pak-cli/releases/download/v3.8.0/cloudctl-linux-amd64.tar.gz
tar -xvf cloudctl-linux-amd64.tar.gz 
cp cloudctl-linux-amd64 /usr/bin/cloudctl
 cloudctl version
 
 Bastion prereqs:
 
yum install -y httpd-tools podman ca-certificates openssl skopeo jq bind-utils git
yum -y install python3

Setup NFS Provisioner:
https://faun.pub/openshift-dynamic-nfs-persistent-volume-using-nfs-client-provisioner-fcbb8c9344e


CPD 4.0:
mkdir -p /data/offline
 export OFFLINEDIR=/data/offline
 export CASE_REPO_PATH=https://github.com/IBM/cloud-pak/raw/master/repo/case
export CLOUDCTL_TRACE=true 
export USE_SKOPEO=true
  112  export PORTABLE_REGISTRY_HOST=localhost
  113  export PORTABLE_REGISTRY_PORT=5000
  114  export PORTABLE_REGISTRY=$PORTABLE_REGISTRY_HOST:$PORTABLE_REGISTRY_PORT
  115  export PORTABLE_REGISTRY_USER=admin
  116  export PORTABLE_REGISTRY_PASSWORD=passw0rd
  117  export PORTABLE_REGISTRY_PATH=$OFFLINEDIR/imageregistry
  118  cloudctl case save   --case ${CASE_REPO_PATH}/ibm-cp-datacore-2.0.1.tgz   --outputdir ${OFFLINEDIR}   --no-dependency
  119  ls /data/offline/
  
  
  120  cloudctl case launch   --case ${OFFLINEDIR}/ibm-cp-datacore-2.0.1.tgz   --inventory cpdPlatformOperator   --action configure-creds-airgap   --args "--registry cp.icr.io --user cp --pass eyJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJJQk0gTWFya2V0cGxhY2UiLCJpYXQiOjE1OTU3ODk1ODYsImp0aSI6IjU3YzYyZDVjODI0ODQwZjI4NDJiYTRlZmQ3NTc0MDdkIn0.caE_g3MOBxAOPHutF6u7V1-GHar_zU87DbLGpSMUPYM --inputDir ${OFFLINEDIR}"
  121  cloudctl case launch   --case ${OFFLINEDIR}/ibm-cp-datacore-2.0.1.tgz   --inventory cpdPlatformOperator   --action configure-creds-airgap   --args "--registry ${PORTABLE_REGISTRY} --user ${PORTABLE_REGISTRY_USER} --pass ${PORTABLE_REGISTRY_PASSWORD}"
  122  ls $HOME/.airgap/secrets/
  
  123  cloudctl case launch   --case ${OFFLINEDIR}/ibm-cp-datacore-2.0.1.tgz   --inventory cpdPlatformOperator   --action init-registry   --args "--registry ${PORTABLE_REGISTRY} --user ${PORTABLE_REGISTRY_USER} --pass ${PORTABLE_REGISTRY_PASSWORD} --dir ${OFFLINEDIR}/imageregistry"
  124  export USE_SKOPEO=true
  125  cloudctl case launch   --case ${OFFLINEDIR}/ibm-cp-datacore-2.0.1.tgz   --inventory cpdPlatformOperator   --action start-registry   --args "--registry ${PORTABLE_REGISTRY} --user ${PORTABLE_REGISTRY_USER} --pass ${PORTABLE_REGISTRY_PASSWORD} --dir ${OFFLINEDIR}/imageregistry"
  126  podman ps
  
  127  cloudctl case save --case ${CASE_REPO_PATH}/ibm-cp-common-services-1.4.1.tgz --outputdir ${OFFLINEDIR}
  128  ls /data/offline/
  129  ls /data/offline/imageregistry/
  
  130  cloudctl case launch   --case ${OFFLINEDIR}/ibm-cp-datacore-2.0.1.tgz   --inventory cpdPlatformOperator   --action mirror-images   --args "--registry ${PORTABLE_REGISTRY} --inputDir ${OFFLINEDIR}"

cloudctl case launch   --case ${OFFLINEDIR}/ibm-cp-common-services-1.4.1.tgz   --inventory ibmCommonServiceOperatorSetup   --action mirror-images   --args "--registry ${PORTABLE_REGISTRY} --user ${PORTABLE_REGISTRY_USER} --pass ${PORTABLE_REGISTRY_PASSWORD} --inputDir ${OFFLINEDIR}"


[root@api.cpd40shan.cp.fyre.ibm.com ~]# cat <<EOF |oc apply -f -
> apiVersion: operator.openshift.io/v1alpha1
> kind: ImageContentSourcePolicy
> metadata:
>   name: cloud-pak-for-data-mirror
> spec:
>   repositoryDigestMirrors:
>   - mirrors:
>     - ${PRIVATE_REGISTRY}/opencloudio
>     source: quay.io/opencloudio
>   - mirrors:
>     - ${PRIVATE_REGISTRY}/cp
>     source: cp.icr.io/cp
>   - mirrors:
>     - ${PRIVATE_REGISTRY}/cp/cpd
>     source: cp.icr.io/cp/cpd
>   - mirrors:
>     - ${PRIVATE_REGISTRY}/cpopen
>     source: icr.io/cpopen
> EOF

[root@api.cpd40shan.cp.fyre.ibm.com ~]# oc get  ImageContentSourcePolicy
NAME                        AGE
cloud-pak-for-data-mirror   2m2s

Create Global Image Pull Secret:

Create catalog source:
cloudctl case launch   --case ${OFFLINEDIR}/ibm-cp-common-services-1.4.1.tgz   --inventory ibmCommonServiceOperatorSetup   --namespace openshift-marketplace   --action install-catalog   --args "--registry ${PRIVATE_REGISTRY} --inputDir ${OFFLINEDIR} --recursive"


oc patch image.config.openshift.io/cluster --type=merge -p '{"spec":{"registrySources":{"insecureRegistries":["'${PRIVATE_REGISTRY}'"]}}}'

 cloudctl case launch   --case ${OFFLINEDIR}/ibm-cp-datacore-2.0.1.tgz   --inventory cpdPlatformOperator   --namespace openshift-marketplace   --action install-catalog   --args "--registry ${PRIVATE_REGISTRY} --inputDir ${OFFLINEDIR} --recursive"
 
Common Services:

 cat <<EOF |oc apply -f -
apiVersion: operators.coreos.com/v1alpha2
kind: OperatorGroup
metadata:
  name: operatorgroup
  namespace: ibm-common-services
spec:
  targetNamespaces:
  - ibm-common-services
EOF


cat <<EOF |oc apply -f -
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: ibm-common-service-operator
  namespace: ibm-common-services
spec:
  channel: v3
  installPlanApproval: Automatic
  name: ibm-common-service-operator
  source: opencloud-operators
  sourceNamespace: openshift-marketplace
EOF


oc get csv
oc get crd | grep operandrequest
oc api-resources --api-group operator.ibm.com

Cpd-operator:
cat <<EOF |oc apply -f -
apiVersion: operators.coreos.com/v1alpha2
kind: OperatorGroup
metadata:
  name: operatorgroup
  namespace: cpd-operators
spec:
  targetNamespaces:
  - cpd-operators
EOF


cat <<EOF |oc apply -f -
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: cpd-operator
  namespace: cpd-operators    # Pick the project that contains the Cloud Pak for Data operator
spec:
  channel: stable-v1
  installPlanApproval: Automatic
  name: cpd-platform-operator
  source: cpd-platform
  sourceNamespace: openshift-marketplace
EOF


Namespace Scope Operator

If you are running a specialized installation (installing the IBM Cloud Pak for Data platform operator and the IBM Cloud Pak foundational services in separate projects), create an operator subscription for the IBM NamespaceScope Operator in the IBM Cloud Pak for Data platform operator project:
cat <<EOF |oc apply -f -
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: ibm-namespace-scope-operator
  namespace: cpd-operators
spec:
  channel: v3
  installPlanApproval: Automatic
  name: ibm-namespace-scope-operator
  source: opencloud-operators
  sourceNamespace: openshift-marketplace
EOF


Update the IBM NamespaceScope Operator in the Cloud Pak for Data operators project to watch the project where you plan to install Cloud Pak for Data.

Edit the namespaceMembers list to add the project where you plan to install Cloud Pak for Data. 
For example, if you plan to install Cloud Pak for Data in the cpd-instance project, add that project to the list:

cat <<EOF |oc apply -f -
apiVersion: operator.ibm.com/v1
kind: NamespaceScope
metadata:
  name: cpd-operators
  namespace: cpd-operators        # (Default) Replace with the Cloud Pak for Data platform operator project name 
spec:
  namespaceMembers:
  - cpd-operators                 # (Default) Replace with the Cloud Pak for Data platform operator project name
  - cpd-instance                  # Replace with the project where you will install Cloud Pak for Data
EOF


Cloud pak for data install:
cat ibmcp-cr.yaml 
apiVersion: cpd.ibm.com/v1
kind: Ibmcpd
metadata:
  name: ibmcpd-cr      
  namespace: cpd-instance                  
spec:
  license:
    accept: true
    license: Enterprise                          
  storageClass: managed-nfs-storage
  zenCoreMetadbStorageClass: managed-nfs-storage  
  version: "4.0.1"
  
  oc create -f ibmcp-cr.yaml
  
  oc logs cpd-platform-operator-manager-5598f744c-g6zc4 -n cpd-operators -f
  
  oc logs ibm-zen-operator-5558bfcf4d-2mdgs -f -n ibm-common-services
  
  [root@api.cpd40shan.cp.fyre.ibm.com ~]# oc get ibmcpd
NAME        AGE
ibmcpd-cr   15m
[root@api.cpd40shan.cp.fyre.ibm.com ~]# oc get zenservice
NAME      AGE
lite-cr   11m

oc get ZenService lite-cr -o jsonpath="{.status.zenStatus}{'\n'}"


[root@api.cpd40shan.cp.fyre.ibm.com ~]# oc get ZenService lite-cr -o jsonpath="{.status.zenStatus}{'\n'}"
Completed
[root@api.cpd40shan.cp.fyre.ibm.com ~]# oc get ZenService lite-cr -o jsonpath="{.status.url}{'\n'}"
cpd-cpd-instance.apps.cpd40shan.cp.fyre.ibm.com

Get the initial password for the admin user:
oc extract secret/admin-user-details --keys=initial_admin_password --to=-

Troubleshooting
oc logs $(oc get po -n cpd-operators| grep cpd-platform-operator-manager | awk '{print $1}')  -n cpd-operators

oc get operandrequest



DV Service Install:

export OFFLINEDIR=/data/offline
export CASE_REPO_PATH=https://github.com/IBM/cloud-pak/raw/master/repo/case
export CLOUDCTL_TRACE=true # for extra logging
export USE_SKOPEO=true

cloudctl case save \
--case ${CASE_REPO_PATH}/ibm-dv-case-1.7.0.tgz \
--outputdir ${OFFLINEDIR}

Skope copy Example:
skopeo copy --all --authfile "/root/.airgap/auth.json" --dest-tls-verify=false --src-tls-verify=false docker://cp.icr.io/cp/db2u.instdb.restricted@sha256:087d81ab50e03ae459e3cefe4756dff5832750f9901819737c936cc6058d036e docker://localhost:5000/cp/db2u.instdb.restricted:11.5.6.0-3781-x86_64

cloudctl case save \
  --case ${CASE_REPO_PATH}/ibm-cp-datacore-2.0.0.tgz \
  --no-dependency \
  --tolerance=1 \
  --outputdir ${OFFLINEDIR}   # --no-dependency flag to prevent downloading other assemblies
  
  
  curl -k -u ${PRIVATE_REGISTRY_USER}:${PRIVATE_REGISTRY_PASSWORD} https://${PRIVATE_REGISTRY}/v2/_catalog?n=6000 |  python -m json.tool

  
